"use strict";(self.webpackChunktmr_ui=self.webpackChunktmr_ui||[]).push([[194],{"./src/stories/TmrForm.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ContactForm:()=>ContactForm,LoginForm:()=>LoginForm,SignUpForm:()=>SignUpForm,__namedExportsOrder:()=>__namedExportsOrder,default:()=>TmrForm_stories});var validator=__webpack_require__("./node_modules/validator/index.js"),validator_default=__webpack_require__.n(validator),index_esm=__webpack_require__("./node_modules/react-hook-form/dist/index.esm.mjs"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const TmrForm=props=>{const{heading,inputs}=props,{register,handleSubmit,formState:{errors}}=(0,index_esm.mN)();return(0,jsx_runtime.jsxs)("div",{className:"max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md",children:[(0,jsx_runtime.jsx)("h1",{className:"text-xl font-bold mb-6",children:heading}),(0,jsx_runtime.jsxs)("form",{onSubmit:handleSubmit((data=>{console.log("Form submitted",data)})),children:[inputs.map(((input,index)=>{var _errors;const{label,type,placeholder,errorOnEmpty,validateError}=input;return(0,jsx_runtime.jsxs)("div",{className:"mb-4",children:[(0,jsx_runtime.jsx)("label",{className:"block text-gray-700 text-sm font-bold mb-2",children:label}),(0,jsx_runtime.jsx)("input",{type:null!=type?type:"text",...placeholder?{placeholder}:{},...register(`input${index}`,{required:errorOnEmpty,validate:validateError}),className:"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"}),errors[`input${index}`]&&(0,jsx_runtime.jsx)("span",{className:"text-red-500 text-sm",children:null===(_errors=errors[`input${index}`])||void 0===_errors?void 0:_errors.message})]},index)})),(0,jsx_runtime.jsx)("button",{type:"submit",className:"w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500",children:"Submit"})]})]})},_components_TmrForm=TmrForm;TmrForm.__docgenInfo={description:"",methods:[],displayName:"TmrForm",props:{heading:{required:!0,tsType:{name:"string"},description:""},inputs:{required:!0,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n  label: string;\n  type?: InputItemType;\n  placeholder?: string;\n  errorOnEmpty: string;\n  helperText?: string;\n  validateError: (value: string) => string | boolean;\n}",signature:{properties:[{key:"label",value:{name:"string",required:!0}},{key:"type",value:{name:"union",raw:"| 'text'\n| 'email'\n| 'password'\n| 'number'\n| 'date'\n| 'checkbox'\n| 'radio'\n| 'file'\n| 'url'\n| 'tel'",elements:[{name:"literal",value:"'text'"},{name:"literal",value:"'email'"},{name:"literal",value:"'password'"},{name:"literal",value:"'number'"},{name:"literal",value:"'date'"},{name:"literal",value:"'checkbox'"},{name:"literal",value:"'radio'"},{name:"literal",value:"'file'"},{name:"literal",value:"'url'"},{name:"literal",value:"'tel'"}],required:!1}},{key:"placeholder",value:{name:"string",required:!1}},{key:"errorOnEmpty",value:{name:"string",required:!0}},{key:"helperText",value:{name:"string",required:!1}},{key:"validateError",value:{name:"signature",type:"function",raw:"(value: string) => string | boolean",signature:{arguments:[{type:{name:"string"},name:"value"}],return:{name:"union",raw:"string | boolean",elements:[{name:"string"},{name:"boolean"}]}},required:!0}}]}}],raw:"InputItem[]"},description:""}}};const TmrForm_stories={title:"Example/TmrForm",component:_components_TmrForm,parameters:{layout:"centered"},tags:["autodocs"]},LoginForm={args:{heading:"Login",inputs:[{label:"Username",placeholder:"Enter your username",errorOnEmpty:"Username is required",validateError:value=>value.length>=3||"Username must be at least 3 characters long"},{label:"Password",placeholder:"Enter your password",errorOnEmpty:"Password is required",validateError:value=>value.length>=8&&/[A-Z]/.test(value)&&/[0-9]/.test(value)&&/[^A-Za-z0-9]/.test(value)||"Password must be at least 8 characters long, contain an uppercase letter, a number, and a special character"}]}},SignUpForm={args:{heading:"Sign Up",inputs:[{label:"Username",errorOnEmpty:"Username is required",validateError:value=>value.length>=3||"Username must be at least 3 characters long"},{label:"Email",errorOnEmpty:"Email is required",validateError:value=>validator_default().isEmail(value)||"Email is not valid"},{label:"Password",placeholder:"Enter your password",errorOnEmpty:"Password is required",validateError:value=>value.length>=8&&/[A-Z]/.test(value)&&/[0-9]/.test(value)&&/[^A-Za-z0-9]/.test(value)||"Password must be at least 8 characters long, contain an uppercase letter, a number, and a special character"},{label:"Confirm Password",placeholder:"Confirm your password",errorOnEmpty:"Confirm Password is required",validateError:(value,formValues)=>value===formValues.password||"Passwords do not match"}]}},ContactForm={args:{heading:"Contact me",inputs:[{label:"Name",errorOnEmpty:"Name is required",validateError:value=>value.length>=10||"Name must be at least 10 characters long"},{label:"Email",placeholder:"Your email",errorOnEmpty:"Missing email",validateError:value=>validator_default().isEmail(value)||"We cannot find that email address",helperText:"We will never ever share your email with anyone else"}]}},__namedExportsOrder=["LoginForm","SignUpForm","ContactForm"];LoginForm.parameters={...LoginForm.parameters,docs:{...LoginForm.parameters?.docs,source:{originalSource:"{\n  args: {\n    heading: 'Login',\n    inputs: [{\n      label: 'Username',\n      placeholder: 'Enter your username',\n      errorOnEmpty: 'Username is required',\n      validateError: (value: string) => value.length >= 3 || 'Username must be at least 3 characters long'\n    }, {\n      label: 'Password',\n      placeholder: 'Enter your password',\n      errorOnEmpty: 'Password is required',\n      validateError: (value: string) => value.length >= 8 && /[A-Z]/.test(value) && /[0-9]/.test(value) && /[^A-Za-z0-9]/.test(value) || 'Password must be at least 8 characters long, contain an uppercase letter, a number, and a special character'\n    }]\n  } as TmrFormProps\n}",...LoginForm.parameters?.docs?.source}}},SignUpForm.parameters={...SignUpForm.parameters,docs:{...SignUpForm.parameters?.docs,source:{originalSource:"{\n  args: {\n    heading: 'Sign Up',\n    inputs: [{\n      label: 'Username',\n      errorOnEmpty: 'Username is required',\n      validateError: (value: string) => value.length >= 3 || 'Username must be at least 3 characters long'\n    }, {\n      label: 'Email',\n      errorOnEmpty: 'Email is required',\n      validateError: (value: string) => validator.isEmail(value) || 'Email is not valid'\n    }, {\n      label: 'Password',\n      placeholder: 'Enter your password',\n      errorOnEmpty: 'Password is required',\n      validateError: (value: string) => value.length >= 8 && /[A-Z]/.test(value) && /[0-9]/.test(value) && /[^A-Za-z0-9]/.test(value) || 'Password must be at least 8 characters long, contain an uppercase letter, a number, and a special character'\n    }, {\n      label: 'Confirm Password',\n      placeholder: 'Confirm your password',\n      errorOnEmpty: 'Confirm Password is required',\n      validateError: (value: string, formValues: TmrFormValues) => value === formValues.password || 'Passwords do not match'\n    }]\n  } as TmrFormProps\n}",...SignUpForm.parameters?.docs?.source}}},ContactForm.parameters={...ContactForm.parameters,docs:{...ContactForm.parameters?.docs,source:{originalSource:"{\n  args: {\n    heading: 'Contact me',\n    inputs: [{\n      label: 'Name',\n      errorOnEmpty: 'Name is required',\n      validateError: (value: string) => value.length >= 10 || 'Name must be at least 10 characters long'\n    }, {\n      label: 'Email',\n      placeholder: 'Your email',\n      errorOnEmpty: 'Missing email',\n      validateError: (value: string) => validator.isEmail(value) || 'We cannot find that email address',\n      helperText: 'We will never ever share your email with anyone else'\n    }]\n  } as TmrFormProps\n}",...ContactForm.parameters?.docs?.source}}}}}]);